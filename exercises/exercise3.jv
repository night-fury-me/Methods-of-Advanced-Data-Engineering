pipeline GoodsTransportedByTrainPipeline {
    GoodsCSVExtractor 
        -> GoodsTextFileInterpreter
        -> GoodsCSVInterpreter 
        -> MetadataRowsRemover 
        -> UnusedColumnsRemover 
        -> GoodsTableInterpreter 
        -> GoodsSQLiteLoader;

    block GoodsCSVExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    block GoodsTextFileInterpreter oftype TextFileInterpreter {}

    block GoodsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block MetadataRowsRemover oftype RowDeleter {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 8, row 41330]; 
    }

    block UnusedColumnsRemover oftype ColumnDeleter {
        delete: [column F, column G, column H, column I, column J, column K, column L, column M, column N, column O, column P, column Q, column R, column S, column T, column U, column V, column W, column X, column Y, column Z, column AA, column AB, column AC, column AD, column AE, column AF, column AG, column AH, column AI, column AJ, column AK, column AL, column AM, column AN, column AO, column AP, column AQ, column AR, column AS];
    }

    block GoodsTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "year" oftype PositiveIntegerType, 
            "month" oftype GermanMonthType, 
            "goods_id" oftype GoodIdType, 
            "goods_name" oftype text, 
            "goods_source" oftype text, 
            "abroad" oftype PositiveIntegerType, 
            "total" oftype PositiveIntegerType
        ];
    }
  
    block GoodsSQLiteLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }
}

valuetype GermanMonthType oftype text {
    constraints: [GermanMonth];
}

constraint GermanMonth on text:
    value in ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];


valuetype GoodIdType oftype text {
    constraints: [GoodsIdPattern];
}

constraint GoodsIdPattern on text:
    value matches /^NST7-[0-9A-Z]{3}$/;


valuetype PositiveIntegerType oftype integer {
    constraints: [PositiveInteger];
}

constraint PositiveInteger on integer:
    value > 0;