pipeline GoodsTransportedByTrainPipeline {
    GoodsCSVExtractor 
        -> GoodsTextFileInterpreter
        -> GoodsCSVInterpreter 
        -> MetadataRowsRemover 
        -> GoodsHeaderWriter
        -> GoodsQuantityHeaderWriter
        -> GoodsTableInterpreter 
        -> MonthCaptitalizeJanuary
        -> MonthCaptitalizeFebruary
        -> MonthCaptitalizeMarch
        -> MonthCaptitalizeApril
        -> MonthCaptitalizeMay
        -> MonthCaptitalizeJune
        -> MonthCaptitalizeJuly
        -> MonthCaptitalizeAugust
        -> MonthCaptitalizeSeptember
        -> MonthCaptitalizeOctober
        -> MonthCaptitalizeNovember
        -> MonthCaptitalizeDecember
        -> GoodsSQLiteLoader;

    block GoodsCSVExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
        retries: 3;
    }

    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin6";
    }

    block GoodsCSVInterpreter oftype CSVInterpreter { 
        delimiter: ";";
        enclosing: '';
    }

    block MetadataRowsRemover oftype RowDeleter {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 41337, row 41338, row 41339];
    }

    block GoodsHeaderWriter oftype CellWriter {
        at: range A1:E1;
        write: ["year", "month", "goods_id", "goods_name", "goods_source"];
    }

    block GoodsQuantityHeaderWriter oftype CellWriter {
        at: range AT1:AU1;
        write: ["abroad", "total"];
    }

    block GoodsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "year" oftype PositiveIntegerType, 
            "month" oftype GermanMonthType, 
            "goods_id" oftype GoodIdType, 
            "goods_name" oftype text, 
            "goods_source" oftype text, 
            "abroad" oftype PositiveIntegerType, 
            "total" oftype PositiveIntegerType
        ];
    }

    transform CapitalizeJanuary {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Januar/ with 'JANUAR' ;
    }

    transform CapitalizeFebruary {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Februar/ with 'FEBRUAR' ;
    }

    transform CapitalizeMarch {
        from prev oftype text;
        to new oftype text;
        new: prev replace /März/ with 'MÄRZ' ;
    }

    transform CapitalizeApril {
        from prev oftype text;
        to new oftype text;
        new: prev replace /April/ with 'APRIL' ;
    }

    transform CapitalizeMay {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Mai/ with 'MAI' ;
    }

    transform CapitalizeJune {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Juni/ with 'JUNI' ;
    }

    transform CapitalizeJuly {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Juli/ with 'JULI' ;
    }

    transform CapitalizeAugust {
        from prev oftype text;
        to new oftype text;
        new: prev replace /August/ with 'AUGUST' ;
    }

    transform CapitalizeSeptember {
        from prev oftype text;
        to new oftype text;
        new: prev replace /September/ with 'SEPTEMBER' ;
    }

    transform CapitalizeOctober {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Oktober/ with 'OKTOBER' ;
    }

    transform CapitalizeNovember {
        from prev oftype text;
        to new oftype text;
        new: prev replace /November/ with 'NOVEMBER' ;
    }

    transform CapitalizeDecember {
        from prev oftype text;
        to new oftype text;
        new: prev replace /Dezember/ with 'DEZEMBER' ;
    }

    block MonthCaptitalizeJanuary oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeJanuary;
    }

    block MonthCaptitalizeFebruary oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeFebruary;
    }

    block MonthCaptitalizeMarch oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeMarch;
    }

    block MonthCaptitalizeApril oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeApril;
    }

    block MonthCaptitalizeMay oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeMay;
    }

    block MonthCaptitalizeJune oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeJune;
    }

    block MonthCaptitalizeJuly oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeJuly;
    }

    block MonthCaptitalizeAugust oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeAugust;
    }

    block MonthCaptitalizeSeptember oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeSeptember;
    }

    block MonthCaptitalizeOctober oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeOctober;
    }

    block MonthCaptitalizeNovember oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeNovember;
    }

    block MonthCaptitalizeDecember oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: CapitalizeDecember;
    }

    block GoodsSQLiteLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }
}

valuetype GermanMonthType oftype text {
    constraints: [GermanMonth];
}

constraint GermanMonth on text:
    value in ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];


valuetype GoodIdType oftype text {
    constraints: [GoodsIdPattern];
}

constraint GoodsIdPattern on text:
    value matches /^NST7-[0-9A-Z]{3}$/;


valuetype PositiveIntegerType oftype integer {
    constraints: [PositiveInteger];
}

constraint PositiveInteger on integer:
    value > 0;