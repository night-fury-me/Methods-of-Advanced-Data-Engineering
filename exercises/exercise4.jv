pipeline TemperaturePipeline {
    TemeperatureZipExtractor 
        -> TemperatureZipArchiveInterpreter
        -> TemperatureCsvFilePicker
        -> TemperatureTextFileInterpreter
        -> TemperatureCsvInterpreter 
        -> TemperatureCellWriter
        -> BatteryTemepratureCellWriter
        -> TemperatureTableInterpreter 
        -> TemperatureTableTransformer
        -> BatteryTemperatureTableTransformer
        -> TemperatureSQLiteLoader;

    block TemeperatureZipExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block TemperatureZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    } 

    block TemperatureCsvFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin6";
    }

    block TemperatureCsvInterpreter oftype CSVInterpreter { 
        delimiter: ";";
    }

    block TemperatureCellWriter oftype CellWriter {
        at: range A1:E1;
        write: ['id', 'producer', 'model', 'month', 'temperature'];
    }

    block BatteryTemepratureCellWriter oftype CellWriter {
        at: cell J1;
        write: ['battery_temperature'];
    }

    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype PositiveIntegerType, 
            "producer" oftype text, 
            "model" oftype text, 
            "month" oftype integer, 
            "temperature" oftype decimal, 
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheitTransformer {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9 / 5) + 32;
    }
    
    block TemperatureTableTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheitTransformer;
    }

    block BatteryTemperatureTableTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheitTransformer;
    }
  
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

valuetype PositiveIntegerType oftype integer {
    constraints: [PositiveInteger];
}

constraint PositiveInteger on integer:
    value > 0;